# -*- coding: utf-8 -*-
# @Author: ZL Deng
# @Date:   2018-08-7 11:54:40

import argparse
import subprocess
from argparse import RawTextHelpFormatter


def extract_tp_fp_snp(vcf_file, snp_file, tp_out, fp_out):
    """ Extract the TP SNPs from the VCF file of caller
    @param vcf_file: The input VCF file for extracting the true positive (TP) and false positive (FP) SNPS.
    @param snp_file: The SNPs between two reference genomes due to sequence differences.
    @param tp_out: The output of TP SNPs identified by caller which are originated from genome differences. 
    @param fp_out: The output of FP SNPs identified by caller by false calling. 
    """
    genome_snp = r'''awk -F"\t" '$2!="."&&$3!="."{{print $1, ".", $2, $3}}' OFS="\t" {}'''.format(
        snp_file)
    snp_by_caller = r'''awk -F"\t" '$4~/^[ACGT]$/&&$5~/^[ACGT]$/&&$6>=20' {}'''.format(
        vcf_file)
    print(vcf_file)
    filter_qual_cmd = r'''(grep -E "^#" {};{}) > {}.filtered.vcf'''.format(vcf_file,
                                                                           snp_by_caller, vcf_file[:-4])
    # print(filter_qual_cmd)
    tp_cmd = r'''(grep -E "^#" {};fgrep -wf <({}) <({})) > {}'''.format(vcf_file,
                                                                        genome_snp, snp_by_caller, tp_out)
    fp_cmd = r'''(grep -E "^#" {};fgrep -wvf <({}) <({})) > {}'''.format(vcf_file,
                                                                         genome_snp, snp_by_caller, fp_out)

    filtered = subprocess.Popen(
        filter_qual_cmd, shell=True, executable="/bin/bash")
    tp = subprocess.Popen(tp_cmd, shell=True, executable="/bin/bash")
    fp = subprocess.Popen(fp_cmd, shell=True, executable="/bin/bash")


if __name__ == "__main__":
    usage = r'''
    extract_TP_FP_SNPs.py --- extract the TP and FP SNPs from VCF input and output them as VCF files. 
        This program requires Python modules argparse.

    Usage:
    python extract_TP_FP_SNPs.py <VCF input file> <SNPs file (genome differences)> 
            <VCF output file for TP> <VCF output file for FP>
    
    This program output the converted format content to the stdin. You can redirect it into a file
    '''

    parser = argparse.ArgumentParser(description=usage,
                                     formatter_class=RawTextHelpFormatter,
                                     epilog="   by ZL Deng")

    parser.add_argument("vcffile", type=str,
                        help="the input VCF file")
    parser.add_argument("snpfile", type=str,
                        help="the input SNP file of genome differences generated by MUMmer")
    parser.add_argument("tpout", type=str,
                        help="the output VCF file for TP")
    parser.add_argument("fpout", type=str,
                        help="the output VCF file for FP")
    args = parser.parse_args()
    extract_tp_fp_snp(args.vcffile, args.snpfile, args.tpout, args.fpout)
